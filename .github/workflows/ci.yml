name: CI
on:
  push:
    branches: [ master ]
  pull_request:
  schedule:
    - cron:  '0 0 * * *'

jobs:

  backwards-compatibility:
    name: Backwards Compatibility
    runs-on: windows-latest
    steps:
      - name: Setup go 1.14
        uses: actions/setup-go@v2
        with: {go-version: 1.14}
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          path: repo
      - name: Load Modules
        run: |
          go mod download
          go mod vendor
        shell: bash
        working-directory: repo
      - name: Move packages
        run: |
          mkdir -p path
          mv repo/vendor path/src
          mkdir -p path/src/github.com/forensicanalysis
          mv repo path/src/github.com/forensicanalysis/artifactcollector
          cp -r path/src/github.com/forensicanalysis/artifactcollector/replace/context path/src
          echo "package afero" > path/src/github.com/spf13/afero/memmap.go
        shell: bash
      - name: Build with go 1.9.7
        run: |
          mkdir -p go1.9.7
          curl -Lso go1.9.7.windows-amd64.zip https://golang.org/dl/go1.9.7.windows-amd64.zip
          unzip -q go1.9.7.windows-amd64.zip -d go1.9.7
          GOPATH=$GITHUB_WORKSPACE/path GOROOT=$GITHUB_WORKSPACE/go1.9.7/go go1.9.7/go/bin/go build github.com/forensicanalysis/artifactcollector/...
        shell: bash
      - name: Build with go 1.7.6
        run: |
          mkdir -p go1.7.6
          curl -Lso go1.7.6.windows-amd64.zip https://golang.org/dl/go1.7.6.windows-amd64.zip
          unzip -q go1.7.6.windows-amd64.zip -d go1.7.6
          GOPATH=$GITHUB_WORKSPACE/path GOROOT=$GITHUB_WORKSPACE/go1.7.6/go go1.7.6/go/bin/go build github.com/forensicanalysis/artifactcollector/...
        shell: bash
      - name: Build with go 1.5.4
        run: |
          mkdir -p go1.5.4
          curl -Lso go1.5.4.windows-amd64.zip https://golang.org/dl/go1.5.4.windows-amd64.zip
          unzip -q go1.5.4.windows-amd64.zip -d go1.5.4
          GOPATH=$GITHUB_WORKSPACE/path GOROOT=$GITHUB_WORKSPACE/go1.5.4/go $GITHUB_WORKSPACE/go1.5.4/go/bin/go build github.com/forensicanalysis/artifactcollector/...
        shell: bash
      - name: Build with go 1.2.2
        run: |
          mkdir -p go1.2.2
          curl -Lso go1.2.2.windows-amd64.zip https://golang.org/dl/go1.2.2.windows-amd64.zip
          unzip -q go1.2.2.windows-amd64.zip -d go1.2.2
          GOPATH=$GITHUB_WORKSPACE/path GOROOT=$GITHUB_WORKSPACE/go1.2.2/go $GITHUB_WORKSPACE/go1.2.2/go/bin/go build github.com/forensicanalysis/artifactcollector/...
        shell: bash

  win2k:
    name: artifactcollector (win2k)
    runs-on: ubuntu-latest
    steps:
      - name: Setup go 1.14
        uses: actions/setup-go@v2
        with: {go-version: 1.14}
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          path: repo
      - name: Setup build
        run: |
          go mod download
          go mod vendor
          go generate
          mv resources/artifactcollector32.syso artifactcollector.syso
        working-directory: repo
      - name: Move packages
        run: |
          mkdir -p path
          mv repo/vendor path/src
          mkdir -p path/src/github.com/forensicanalysis
          mv repo path/src/github.com/forensicanalysis/artifactcollector
          cp -r path/src/github.com/forensicanalysis/artifactcollector/replace/context path/src
          echo "package afero" > path/src/github.com/spf13/afero/memmap.go
      - name: Build with go 1.2.2
        run: |
          mkdir -p go1.2.2
          curl -s https://dl.google.com/go/go1.2.2.linux-amd64.tar.gz | tar xz -C go1.2.2
          sudo apt-get install mingw-w64
          CGO_ENABLED=1 CC=i686-w64-mingw32-gcc GOOS=windows GOARCH=386 GOPATH=$GITHUB_WORKSPACE/path GOROOT=$GITHUB_WORKSPACE/go1.2.2/go \
            $GITHUB_WORKSPACE/go1.2.2/go/bin/go build -o artifactcollector2k.exe github.com/forensicanalysis/artifactcollector
      - name: Upload artifactcollector
        uses: actions/upload-artifact@master
        with:
          name: artifactcollector  (Windows 2000, 32bit)
          path: artifactcollector2k.exe

  winxp:
    name: artifactcollector (winxp)
    runs-on: ubuntu-latest
    steps:
      - name: Setup go 1.14
        uses: actions/setup-go@v2
        with: {go-version: '1.14'}
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Download dependencies
        run: go mod download
      - name: Setup Build
        run: go generate
      - name: Add Windows 32bit syso File
        run: mv resources/artifactcollector32.syso artifactcollector.syso
      - name: Build 32bit Windows
        run: |
          sudo apt-get install mingw-w64
          CGO_ENABLED=1 CC=i686-w64-mingw32-gcc GOOS=windows GOARCH=386 go build -o artifactcollectorxp.exe .
      - name: Move 32bit Binary
        run: |
          mkdir bin
          mv artifactcollectorxp.exe bin
      - name: Upload artifactcollector (XP, 32bit)
        uses: actions/upload-artifact@master
        with:
          name: artifactcollector (Windows XP, 32bit)
          path: bin

  artifactcollector:
    name: artifactcollector
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [macos-latest, windows-latest, ubuntu-latest]
      fail-fast: false
    steps:
      - name: Setup go 1.14
        uses: actions/setup-go@v2
        with: {go-version: '1.14'}
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Download dependencies
        run: go mod download

      - name: Install golangci-lint & go-acc
        run: |
          curl -sfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh| sh -s -- -b $(go env GOPATH)/bin v1.25.0
          go get github.com/ory/go-acc
        shell: bash

      - name: Lint
        run: golangci-lint run --verbose --config test/.golangci.yml --enable gofmt --enable goimports
        if: matrix.os != 'windows-latest'
      - name: Lint Windows
        run: golangci-lint run --verbose --config test/.golangci.yml
        if: matrix.os == 'windows-latest'
      - name: Test
        run: go-acc ./...
        shell: bash
      - name: Upload coverage
        env:
          CI: "true"
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
        run: bash <(curl -s https://codecov.io/bash)
        if: matrix.os == 'windows-latest'
        shell: bash

      - name: Setup node
        uses: actions/setup-node@v1
        with: {node-version: '10.x'}
      - name: Install bats
        run: npm install -g bats@1.1.0

      - name: Setup Build
        run: go generate
      - name: Add Windows syso File
        run: mv resources/artifactcollector.syso artifactcollector.syso
        if: matrix.os == 'windows-latest'
        shell: bash
      - name: Build
        run: |
          go build .
          go install .

      - name: Install forensicstore
        run: go get github.com/forensicanalysis/forensicstore/cmd/forensicstore@v0.17.2
      - name: Windows bats test
        run: bats test/bats/artifactcollector.windows.bats
        if: matrix.os == 'windows-latest'
        shell: bash
      - name: UNIX bats test
        run: bats test/bats/artifactcollector.unix.bats
        if: matrix.os != 'windows-latest'
        shell: bash

      - name: Remove Windows syso File
        run: rm artifactcollector.syso
        if: matrix.os == 'windows-latest'
        shell: bash

      - name: Move Binary
        run: |
          mkdir bin store
          mv artifactcollector* bin
          mv *.forensicstore store
        shell: bash

      - name: Upload artifactcollector
        uses: actions/upload-artifact@master
        with:
          name: artifactcollector ${{ matrix.os }}
          path: bin
      - name: Upload store
        uses: actions/upload-artifact@master
        with:
          name: store ${{ matrix.os }}
          path: store

  docs:
    name: Documentation
    runs-on: ubuntu-latest
    steps:
      - name: Setup go 1.14
        uses: actions/setup-go@v2
        with: {go-version: '1.14'}
      - run: go get -u github.com/cugu/godoc2readme

      - name: Checkout code
        uses: actions/checkout@v2
      - run: godoc2readme --template docs/readme-template.md . > README2.md
      - run: diff README.md README2.md
